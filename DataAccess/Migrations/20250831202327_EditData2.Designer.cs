// <auto-generated />
using DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(Job_Board))]
    [Migration("20250831202327_EditData2")]
    partial class EditData2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DataAccess.Entities.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Leading tech company",
                            Name = "TechCorp",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Description = "Startup for innovation",
                            Name = "InnovateX",
                            UserId = 2
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.Job", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LSocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SalaryMax")
                        .HasColumnType("int");

                    b.Property<int>("SalaryMin")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Jobs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CompanyId = 1,
                            Description = "We are looking for a skilled Software Developer to join our dynamic team. You will be responsible for designing, coding, and maintaining web applications using modern technologies. The ideal candidate should have experience with C#, ASP.NET Core, and SQL databases, as well as a strong understanding of software design principles. You will work closely with product managers and designers to deliver high-quality features.",
                            ImageUrl = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQ7vsQ87hL64dYCv53oQN7McuPipgKNw_5Z6A&s",
                            LSocation = "Kyiv",
                            SalaryMax = 4000,
                            SalaryMin = 2000,
                            Title = "Software Developer"
                        },
                        new
                        {
                            Id = 2,
                            CompanyId = 1,
                            Description = "Join our QA team to ensure the highest quality of our software solutions. As a QA Engineer, you will create and execute test cases, identify and document bugs, and collaborate with developers to resolve issues. Experience in manual testing is required, and knowledge of automated testing tools (Selenium, Postman) is a plus. Strong attention to detail and analytical skills are essential.",
                            ImageUrl = "https://inproject.org/wp-content/uploads/2023/02/divchuna-qa-1024x683.jpg",
                            LSocation = "Lviv",
                            SalaryMax = 3000,
                            SalaryMin = 1500,
                            Title = "QA Engineer"
                        },
                        new
                        {
                            Id = 3,
                            CompanyId = 2,
                            Description = "We are seeking a talented UI/UX Designer to create intuitive and visually appealing interfaces for our web and mobile applications. Your role will include user research, wireframing, prototyping, and collaborating with developers to implement your designs. The ideal candidate should have experience with Figma, Adobe XD, or similar tools, and a good understanding of user-centered design principles.",
                            ImageUrl = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcROSsJYCBw-B3S44zjkaA9otdPX8o5GO2QyEQ&s",
                            LSocation = "Remote",
                            SalaryMax = 3500,
                            SalaryMin = 1800,
                            Title = "UI/UX Designer"
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "alice@company.com",
                            Name = "Alice HR",
                            PasswordHash = "hash1",
                            ProfileInfo = "HR Manager",
                            Role = "HR"
                        },
                        new
                        {
                            Id = 2,
                            Email = "bob@company.com",
                            Name = "Bob HR",
                            PasswordHash = "hash2",
                            ProfileInfo = "HR Specialist",
                            Role = "HR"
                        },
                        new
                        {
                            Id = 3,
                            Email = "charlie@mail.com",
                            Name = "Charlie Candidate",
                            PasswordHash = "hash3",
                            ProfileInfo = "Software Developer",
                            Role = "Candidate"
                        },
                        new
                        {
                            Id = 4,
                            Email = "diana@mail.com",
                            Name = "Diana Candidate",
                            PasswordHash = "hash4",
                            ProfileInfo = "QA Engineer",
                            Role = "Candidate"
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.Company", b =>
                {
                    b.HasOne("DataAccess.Entities.User", "Owner")
                        .WithMany("OwnedCompanies")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("DataAccess.Entities.Job", b =>
                {
                    b.HasOne("DataAccess.Entities.Company", "Company")
                        .WithMany("Jobs")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("DataAccess.Entities.Company", b =>
                {
                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("DataAccess.Entities.User", b =>
                {
                    b.Navigation("OwnedCompanies");
                });
#pragma warning restore 612, 618
        }
    }
}
